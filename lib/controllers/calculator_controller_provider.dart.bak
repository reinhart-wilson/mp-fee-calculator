import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:mp_calculator/models/fee.dart';
import 'package:mp_calculator/models/fee_calculator.dart';

enum CalculationMode { netToGross, grossToNet }

class CalculatorNotifier extends Notifier<CalculatorState> {
  @override
  CalculatorState build() => (CalculatorState(
      basePrice: 0.0,
      appliedFlatFees: [],
      appliedMultFees: [],
      mode: CalculationMode.netToGross));

  void setMode(CalculationMode newMode) {
    state = state.copyWith(mode: newMode);
  }

  void updateBasePrice(double price) {
    state = state.copyWith(basePrice: price);
  }

  void updateAppliedFees(List<Fee> appliedFees) {
    final appliedFlatFees = appliedFees.whereType<FlatFee>().toList();
    final appliedMultFees = appliedFees.whereType<MultiplierFee>().toList();
    state = state.copyWith(
        appliedFlatFees: appliedFlatFees, appliedMultFees: appliedMultFees);
  }
}

final calculatorNotifierProvider =
    NotifierProvider<CalculatorNotifier, CalculatorState>(
        CalculatorNotifier.new);

class CalculatorState {
  final double basePrice;
  final FeeCalculator calculator;
  final CalculationMode mode;

  CalculatorState({ 
    required this.basePrice,
    required List<FlatFee> appliedFlatFees,
    required List<MultiplierFee> appliedMultFees,
    this.mode = CalculationMode.netToGross,
  }) : calculator = FeeCalculator(
          flatFees: appliedFlatFees,
          multiplierFees: appliedMultFees,
        );

  List<FlatFee> get appliedFlatFees => calculator.flatFees;
  List<MultiplierFee> get appliedMultFees => calculator.multiplierFees;
  List<Fee> get appliedFees => [...appliedMultFees, ...appliedFlatFees];

  double get price => switch (mode) {
        CalculationMode.netToGross => calculator.calculateGross(basePrice),
        CalculationMode.grossToNet => calculator.calculateNet(basePrice),
      };

  CalculatorState copyWith({
    double? basePrice,
    List<FlatFee>? appliedFlatFees,
    List<MultiplierFee>? appliedMultFees,
    CalculationMode? mode,
  }) {
    return CalculatorState(
      basePrice: basePrice ?? this.basePrice,
      appliedFlatFees: appliedFlatFees ?? calculator.flatFees,
      appliedMultFees: appliedMultFees ?? calculator.multiplierFees,
      mode: mode ?? this.mode,
    );
  }
}
